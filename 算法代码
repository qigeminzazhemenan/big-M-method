#类似工程问题，n个人做n个任务，一人一个，求最晚一个人要花费时间的最小值。

import numpy as np

#ij元素代表第i人干第j个任务需要的时间
time_list = np.random.randint(1,20,size=(15,15))
print("时间表:\n",time_list)

#初始化分配方案（将第i个任务分给第i个人）
arrangement = [[i,i] for i in range(0,15)]

#进入算法循环
#switch用于退出循环
switch=1
while switch:
    
    #寻找当前分配方案下最晚完成的任务编号和完成者编号
    slowest = arrangement[0]
    for i in range(1,15):
        if time_list[slowest[0],slowest[1]]<time_list[arrangement[i][0],arrangement[i][1]]:
            slowest = arrangement[i]
    #最晚完成时间
    slowest_time = time_list[slowest[0],slowest[1]]
    
    #寻找是否有更好的方案
    for i in arrangement:
        if time_list[slowest[0],i[1]]<slowest_time \
        and time_list[i[0],slowest[1]]<slowest_time:
                slowest[1],i[1] = i[1],slowest[1]
                break
        #找不到更好方案时，退出循环
        if i==arrangement[14]:switch=0
                  
#最佳分配方案
print("最佳方案:")
for i in range(0,15):print("第",(i+1),"人完成第",(arrangement[i][1]+1),"项任务，用时",\
                           time_list[arrangement[i][0],arrangement[i][1]])        
        
